# -*- coding: utf-8 -*-
"""project1(developer survey)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JuM1XYbl_y-I6Pl539vEWyxNNSBcV7GV
"""

import opendatasets as od
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

od.download('stackoverflow-developer-survey-2020')

import os

survey_raw_df = pd.read_csv('stackoverflow-developer-survey-2020/survey_results_public.csv')
survey_raw_df

survey_raw_df.dropna()

schema_fname = 'stackoverflow-developer-survey-2020/survey_results_schema.csv'
schema_raw = pd.read_csv(schema_fname, index_col='Column').QuestionText

schema_raw

schema_raw['YearsCodePro']

selected_columns = [
    # Demographics
    'Country',
    'Age',
    'Gender',
    'EdLevel',
    'UndergradMajor',
    # Programming experience
    'Hobbyist',
    'Age1stCode',
    'YearsCode',
    'YearsCodePro',
    'LanguageWorkedWith',
    'LanguageDesireNextYear',
    'NEWLearn',
    'NEWStuck',
    # Employment
    'Employment',
    'DevType',
    'WorkWeekHrs',
    'JobSat',
    'JobFactors',
    'NEWOvertime',
    'NEWEdImpt'
]

survey_df = survey_raw_df[selected_columns].copy()
schema = schema_raw[selected_columns]

survey_df.shape

survey_df.info()

survey_df['Age1stCode'] = pd.to_numeric(survey_df.Age1stCode, errors='coerce')
survey_df['YearsCode'] = pd.to_numeric(survey_df.YearsCode, errors='coerce')
survey_df['YearsCodePro'] = pd.to_numeric(survey_df.YearsCodePro, errors='coerce')
survey_df.describe()

survey_df.drop(survey_df[survey_df.Age < 10].index, inplace=True)
survey_df.drop(survey_df[survey_df.Age > 100].index, inplace=True)

survey_df.drop(survey_df[survey_df.WorkWeekHrs > 140].index, inplace=True)
survey_df['Gender'].value_counts()

survey_df.where(~(survey_df.Gender.str.contains(';', na=False)), np.nan, inplace=True)
survey_df.sample(10)

schema.Country

survey_df.Country.nunique()

top_countries = survey_df.Country.value_counts().head(15)
top_countries

plt.figure(figsize=(12,6))
plt.xticks(rotation=75)
plt.title(schema.Country)
sns.barplot(x=top_countries.index, y=top_countries);

plt.figure(figsize=(12, 6))
plt.title(schema.Age)
plt.xlabel('Age')
plt.ylabel('Number of respondents')

plt.hist(survey_df.Age, bins=np.arange(10,80,5), color='purple');

schema.Gender

gender_counts = survey_df.Gender.value_counts()
gender_counts

plt.figure(figsize=(12,6))
plt.title(schema.Gender)
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=180);

sns.countplot(y=survey_df.EdLevel)
plt.xticks(rotation=75);
plt.title(schema['EdLevel'])
plt.ylabel(None);

schema.UndergradMajor

undergrad_pct = survey_df.UndergradMajor.value_counts() * 100 / survey_df.UndergradMajor.count()

sns.barplot(x=undergrad_pct, y=undergrad_pct.index)

plt.title(schema.UndergradMajor)
plt.ylabel(None);
plt.xlabel('Percentage');

schema.Employment

(survey_df.Employment.value_counts(normalize=True, ascending=True)*100).plot(kind='barh', color='g')
plt.title(schema.Employment)
plt.xlabel('Percentage');

schema.DevType

survey_df.DevType.value_counts()

def split_multicolumn(col_series):
    result_df = col_series.to_frame()
    options = []
    # Iterate over the column
    for idx, value  in col_series[col_series.notnull()].iteritems():
        # Break each value into list of options
        for option in value.split(';'):
            # Add the option as a column to result
            if not option in result_df.columns:
                options.append(option)
                result_df[option] = False
            # Mark the value in the option column as True
            result_df.at[idx, option] = True
    return result_df[options]

dev_type_df = split_multicolumn(survey_df.DevType)
dev_type_df

dev_type_totals = dev_type_df.sum().sort_values(ascending=False)
dev_type_totals

plt.figure(figsize=(70,18))
plt.title(schema.DevType)
plt.pie(dev_type_totals, labels=dev_type_totals.index, autopct='%1.1f%%', startangle=180);

"""Q: Which languages are the most people interested to learn over the next year?"""

languages_interested_df = split_multicolumn(survey_df.LanguageDesireNextYear)
languages_interested_percentages = languages_interested_df.mean().sort_values(ascending=False) * 100
languages_interested_percentages

plt.figure(figsize=(12,6))
plt.xticks(rotation=75)
plt.title(schema.Country)
sns.barplot(x=languages_interested_percentages.index, y=languages_interested_percentages,color='blue');